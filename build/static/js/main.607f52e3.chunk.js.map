{"version":3,"sources":["presentation/state/news/news.reducer.ts","presentation/state/news/news.types.ts","presentation/state/headlines/headlines.reducer.ts","presentation/state/headlines/headlines.types.ts","core/redux/rootReducer.ts","core/redux/store.ts","domain/usecases/getNewsUseCase.ts","domain/entities/newsItemEntity.ts","core/config/config.ts","core/network/contraHttpClient.ts","core/utils/stringifyQueryParams.ts","core/network/httpClient.ts","domain/entities/source.ts","data/remoteDatasource/newsRemoteDatasource.ts","data/repository/newListRepositoryImpl.ts","presentation/state/news/news.actions.ts","domain/usecases/getHeadlinesUseCase.ts","presentation/state/headlines/healines.actions.ts","presentation/component/NewsCard.tsx","presentation/screens/HomeScreen/newsCardList.tsx","presentation/screens/HomeScreen/index.tsx","presentation/screens/SearchResult/index.tsx","presentation/component/Header.tsx","presentation/App.tsx","serviceWorker.ts","index.tsx"],"names":["initialNewsState","loading","newsItems","state","action","type","payload","initialHeadlinesNewsState","headlines","rootReducer","combineReducers","createStore","composeWithDevTools","applyMiddleware","thunk","NewsUsecase","newsListRepository","searchQuery","this","getList","NewsItemEntity","id","source","author","title","description","url","urlToImage","publishedAt","content","config","contraHttpClient","baseURL","_API_KEY","API_KEY","_QUERY_START_KEY","queryParams","queryParamsString","query","map","item","key","value","join","queryParamToStrings","apiKeyQuery","getAPIKey","joinedQuery","joinQueries","data","query1","query2","length","baseUrl","timeout","_defaultTimeout","client","axios","create","get","post","put","patch","delete","Source","name","responseToEntityMapper","response","initId","articles","newsRemoteDatasource","console","log","Error","NewsListRepositoryImpl","getHeadlines","getNewsList","dispatch","seachQuery","a","newsListRepositoryImpl","newsUsecase","getNewsUseCase","newItems","fetchNewsListSuccess","error","GetHeadlinesUseCase","headlinesUsecase","fetchHeadlinesSuccess","NewsCard","props","news","className","src","alt","href","target","rel","time","moment","utc","fromNow","NewsCardList","listOfCards","list","index","HomeScreen","keyword","React","Component","connect","useParams","useEffect","Header","useState","searchKey","setSearchKey","to","data-toggle","data-target","aria-controls","aria-expanded","aria-label","activeClassName","placeholder","onChange","event","App","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","store","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"gYAWaA,EAA8B,CACzCC,SAAS,EACTC,UAAW,IA6BEA,MA1Bf,WAAkE,IAA/CC,EAA8C,uDAAtCH,EAAkBI,EAAoB,uDAAN,KACzD,OAAQA,EAAOC,MACb,IClBkC,yBDmBhC,OAAO,2BACFF,GADL,IAEEF,SAAS,IAGb,ICtBkC,yBDuBhC,OAAO,2BACFE,GADL,IAEEF,SAAS,IAGb,IC7BkC,yBD8BhC,OAAO,2BACFE,GADL,IAEED,UAAWE,EAAOE,QAClBL,SAAS,IAGb,QACE,OAAOE,IE1BAI,EAA4C,CACvDN,SAAS,EACTC,UAAW,IA6BEM,MA1Bf,WAA2E,IAAxDL,EAAuD,uDAA/CI,EAA2BH,EAAoB,uDAAN,KAClE,OAAQA,EAAOC,MACb,ICnBkC,yBDoBhC,OAAO,2BACFF,GADL,IAEEF,SAAS,IAGb,ICvBkC,yBDwBhC,OAAO,2BACFE,GADL,IAEEF,SAAS,IAGb,IC9BkC,yBD+BhC,OAAO,2BACFE,GADL,IAEED,UAAWE,EAAOE,QAClBL,SAAS,IAGb,QACE,OAAOE,IE7BEM,EALKC,0BAAgB,CAClCR,YACAM,c,gBCGaG,wBACbF,EACAG,8BAAoBC,0BAAgBC,O,sDCTzBC,EAAb,WACE,WAAoBC,GAA0C,yBAA1CA,qBADtB,2DAEiBC,GACb,OAAOC,KAAKF,mBAAmBG,QAAQF,OAH3C,KCDaG,EACX,WACSC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GACN,yBATMR,KASP,KAROC,SAQP,KAPOC,SAOP,KANOC,QAMP,KALOC,cAKP,KAJOC,MAIP,KAHOC,aAGP,KAFOC,cAEP,KADOC,W,iCCHIC,E,MCHR,IA4CMC,EAAmB,IA5ChC,kDAGE,aAAe,IAAD,8BACZ,cAAMD,EAAOE,UAHfC,SAAWH,EAAOI,QAEJ,EADdC,iBAAmB,IACL,EAHhB,gDAQIT,EACAU,GAEA,IAAIC,ECdD,SAA6BD,GAClC,IAAIE,EAAQ,GASZ,OARIF,IACFE,GAASF,EACNG,KAAI,SAACC,GACJ,MAAM,GAAN,OAAUA,EAAKC,KAAf,OANW,KAMX,OAAsCD,EAAKE,UAE5CC,KATa,MAYXL,EDImBM,CAAoBR,GACxCS,EAAc3B,KAAK4B,YACnBC,EAAc7B,KAAK8B,YAAYX,EAAmBQ,GACtD,OAAO,2DAAUnB,EAAMqB,KAd3B,2BAiB0CrB,EAAauB,GACnD,OAAO,4DAAWvB,EAAKuB,KAlB3B,0BAqByCvB,EAAauB,GAClD,OAAO,2DAAUvB,EAAKuB,KAtB1B,4BAyB2CvB,EAAauB,GACpD,OAAO,6DAAYvB,EAAKuB,KA1B5B,6BA6ByCvB,GACrC,OAAO,8DAAaA,KA9BxB,kCAkCI,MAAM,UAAN,OAAiBR,KAAKe,YAlC1B,kCAqCsBiB,EAAgBC,GAClC,MAAM,GAAN,OAAUjC,KAAKiB,kBAAf,OACEe,EAAOE,OAAS,EAAIF,EAAS,IAAM,IADrC,OAEGC,OAxCP,G,WEDE,WAAmBE,EAAwBC,GAAmB,yBAA3CD,UAA0C,KAAlBC,UAAkB,KAF7DC,gBAAkB,IAE2C,KAD7DC,YAC6D,EAC3DtC,KAAKsC,OAASC,IAAMC,OAAO,CACzB1B,QAASF,EAAOE,QAChBsB,QAASA,GAAWpC,KAAKqC,kB,gDAIO7B,GAClC,OAAOR,KAAKsC,OAAOG,IAAIjC,K,2BAGeA,EAAauB,GACnD,OAAO/B,KAAKsC,OAAOI,KAAKlC,EAAKuB,K,0BAGQvB,EAAauB,GAClD,OAAO/B,KAAKsC,OAAOK,IAAInC,EAAKuB,K,4BAGWvB,EAAauB,GACpD,OAAO/B,KAAKsC,OAAOM,MAAMpC,EAAKuB,K,6BAGOvB,GACrC,OAAOR,KAAKsC,OAAOO,OAAOrC,O,OC7BjBsC,EACX,WAAmB3C,EAAmB4C,GAAe,yBAAlC5C,KAAiC,KAAd4C,QCSxC,SAASC,EAAuBC,GAC9B,IAAIC,EAAS,EACb,OAAOD,EAASlB,KAAKoB,SAAS9B,KAAI,SAACC,GACjC,OAAKA,EAAKb,WACH,IAAIP,EACTgD,IACA,IAAIJ,EAAOxB,EAAKlB,OAAOD,GAAImB,EAAKlB,OAAO2C,MACvCzB,EAAKjB,OACLiB,EAAKhB,MACLgB,EAAKf,YACLe,EAAKd,IACLc,EAAKb,WACLa,EAAKZ,YACLY,EAAKX,SAVsB,QAc1B,IA4BMyC,EAAuB,IA5BpC,yIACgBrD,GADhB,gGAG2Bc,EAAiB4B,IAAkB,cAAe,CACrE,CAAElB,IAAK,IAAKC,MAAOzB,KAJ3B,cAGUkD,EAHV,yBAMaD,EAAuBC,IANpC,sCAQMI,QAAQC,IAAI,6CAAZ,MACMC,MAAM,oBATlB,8RAe2B1C,EAAiB4B,IACpC,iBACA,CAAC,CAAElB,IAAK,UAAWC,MAAO,QAjBlC,cAeUyB,EAfV,yBAoBaD,EAAuBC,IApBpC,sCAsBMI,QAAQC,IAAI,2CAAZ,MACMC,MAAM,oBAvBlB,uHCvBqBC,E,uGAEjB,OAAOJ,EAAqBK,iB,uEAEhB1D,G,0FACLqD,EAAqBnD,QAAQF,I,yGCI3B2D,EAAW,uCAAG,WAAOC,EAAoBC,GAA3B,mBAAAC,EAAA,6DACzBF,EAcO,CAAExE,Kd5B2B,2BcaX,SAIjB2E,EAAyB,IAAIN,EAC7BO,EAAc,IAAIlE,EAAYiE,GALb,SAOAC,EAAYC,eAAeJ,GAP3B,OAOjBK,EAPiB,OAQvBN,EAASO,EAAqBD,IARP,kDAUvBN,EAYK,CAAExE,KdjC2B,yBciCGgF,MAZT,EAAD,KAVJ,0DAAH,wDAiBjB,SAASD,EAAqBD,GACnC,MAAO,CAAE9E,Kd9B2B,yBc8BGC,QAAS6E,GC5B3C,IAAMG,EAAb,WACE,WAAoBtE,GAA0C,yBAA1CA,qBADtB,2DAGI,OAAOE,KAAKF,mBAAmB2D,mBAHnC,KCOaA,EAAY,uCAAG,WAAOE,GAAP,mBAAAE,EAAA,6DAC1BR,QAAQC,IAAI,QAASK,GACrBA,EAgBO,CAAExE,Kd5B2B,2BcUV,SAKlB2E,EAAyB,IAAIN,EAC7Ba,EAAmB,IAAID,EAAoBN,GANzB,SAQDO,EAAiBZ,eARhB,OAQlBQ,EARkB,OASxBZ,QAAQC,IAAI,MAAOW,GACnBN,EAASW,EAAsBL,IAVP,kDAYxBZ,QAAQC,IAAI,MAAZ,MACAK,EAYK,CAAExE,KdjC2B,yBciCGgF,MAZR,EAAD,KAbJ,0DAAH,sDAoBlB,SAASG,EAAsBL,GACpC,MAAO,CAAE9E,Kd9B2B,yBc8BGC,QAAS6E,G,2BCWnCM,MA/Bf,SAAkBC,GAChB,OAAKA,EAAMC,KAIT,yBAAKC,UAAU,SACb,yBACEA,UAAU,eACVC,IAAKH,EAAMC,KAAKhE,WAChBmE,IAAI,iBAEN,yBAAKF,UAAU,aACb,wBAAIA,UAAU,cAAcF,EAAMC,KAAKnE,OACvC,uBAAGoE,UAAU,aAAaF,EAAMC,KAAK9D,SAErC,uBAAG+D,UAAU,aACX,2BAAOA,UAAU,cACdF,EAAMC,KAAKpE,OADd,KACwBmE,EAAMC,KAAKrE,OAAO2C,OAG5C,uBAAG8B,KAAML,EAAMC,KAAKjE,IAAKsE,OAAO,SAASC,IAAI,uBAA7C,oBAIF,yBAAKL,UAAU,eACb,2BAAOA,UAAU,eA5BRM,EA4B8BR,EAAMC,KAAK/D,YA3BjDuE,IAAOC,IAAIF,GAAMG,cAIf,KALX,IAAiBH,GCMFI,MAPf,SAAsBZ,GACpB,IAAIa,EAAcb,EAAMc,KAAKjE,KAAI,SAACC,EAAMiE,GAAP,OAC/B,kBAAC,EAAD,CAAUd,KAAMnD,EAAMC,IAAG,UAAKgE,QAEhC,OAAO,yBAAKb,UAAU,gBAAgBW,ICGlCG,E,2KACSC,GACXzF,KAAKwE,MAAMd,YAAY+B,K,0CAGvBzF,KAAKwE,MAAMf,iB,+BAGX,OACE,yBAAKiB,UAAU,aACb,kBAAC,EAAD,CAAcY,KAAMtF,KAAKwE,MAAMlF,iB,GAVdoG,IAAMC,WA8BhBC,eAdS,SAAC3G,GACvB,MAAO,CACLD,UAAWC,EAAMD,UAAUA,UAC3BM,UAAWL,EAAMK,UAAUN,cAIJ,SAAC2E,GAC1B,MAAO,CACLD,YAAa,SAAC3D,GAAD,OAAyB2D,EAAYC,EAAU5D,IAC5D0D,aAAc,kBAAMA,EAAaE,OAItBiC,CAA6CJ,G,eCjB5D,IAYeI,eAZS,SAAC3G,GACvB,MAAO,CACLD,UAAWC,EAAMD,UAAUA,cAIJ,SAAC2E,GAC1B,MAAO,CACLD,YAAa,SAAC3D,GAAD,OAAyB2D,EAAYC,EAAU5D,OAIjD6F,EA3Bf,SAAsBpB,GAAgB,IAC9BrE,EAAO0F,cAAP1F,GAKN,OAJA2F,qBAAU,WACRtB,EAAMd,YAAYvD,KAEjB,CAACA,IAEF,oCACE,yBAAKuE,UAAU,aACb,kBAAC,EAAD,CAAcY,KAAMd,EAAMxF,iB,QClBnB,SAAS+G,IAAU,IAAD,EACGC,mBAAS,IADZ,mBACxBC,EADwB,KACbC,EADa,KAE/B,OACE,yBAAKxB,UAAU,0DACb,kBAAC,IAAD,CAASyB,GAAG,KACV,0BAAMzB,UAAU,gBAAhB,iBAEF,4BACEA,UAAU,iBACVvF,KAAK,SACLiH,cAAY,WACZC,cAAY,uBACZC,gBAAc,sBACdC,gBAAc,QACdC,aAAW,qBAEX,0BAAM9B,UAAU,yBAGlB,yBAAKA,UAAU,2BAA2BvE,GAAG,uBAC3C,wBAAIuE,UAAU,mCACZ,wBAAIA,UAAU,YACZ,kBAAC,IAAD,CACEyB,GAAG,aACHM,gBAAgB,SAChB/B,UAAU,YAHZ,aAKY,0BAAMA,UAAU,WAAhB,gBAIhB,yBAAKA,UAAU,4BACb,2BACEA,UAAU,uBACVvF,KAAK,SACLuH,YAAY,SACZC,SAAU,SAACC,GAAD,OAAWV,EAAaU,EAAM9B,OAAOtD,UAEjD,kBAAC,IAAD,CAAM2E,GAAE,kBAAaF,IACnB,4BAAQvB,UAAU,wCAAlB,cCZGmC,MAnBf,SAAarC,GACX,OACE,kBAAC,IAAD,KACE,kBAACuB,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOe,KAAK,eACV,kBAAC,EAAiBtC,IAEpB,kBAAC,IAAD,CAAOsC,KAAK,aAAaC,OAAO,GAC9B,kBAAC,EAAevC,IAElB,kBAAC,IAAD,CAAOuC,OAAK,EAACD,KAAK,KAChB,kBAAC,IAAD,CAAUX,GAAG,mBCXHa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAD,CAAUC,MAAOA,GACf,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAAC9D,GACNd,QAAQc,MAAMA,EAAM+D,c","file":"static/js/main.607f52e3.chunk.js","sourcesContent":["import {\n  NEWS_LIST_LOAD_REQUEST,\n  NEWS_LIST_LOAD_SUCCESS,\n  NEWS_LIST_LOAD_FAILURE,\n} from \"./news.types\";\nimport { NewsItemEntity } from \"../../../domain/entities/newsItemEntity\";\n\nexport type NewsState = {\n  loading: boolean;\n  newsItems: NewsItemEntity[];\n};\nexport const initialNewsState: NewsState = {\n  loading: false,\n  newsItems: [],\n};\n\nfunction newsItems(state = initialNewsState, action: any = null) {\n  switch (action.type) {\n    case NEWS_LIST_LOAD_REQUEST:\n      return {\n        ...state,\n        loading: true,\n      };\n\n    case NEWS_LIST_LOAD_FAILURE:\n      return {\n        ...state,\n        loading: false,\n      };\n\n    case NEWS_LIST_LOAD_SUCCESS:\n      return {\n        ...state,\n        newsItems: action.payload,\n        loading: false,\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default newsItems;\n","export const NEWS_LIST_LOAD_REQUEST = \"NEWS_LIST_LOAD_REQUEST\";\nexport const NEWS_LIST_LOAD_SUCCESS = \"NEWS_LIST_LOAD_SUCCESS\";\nexport const NEWS_LIST_LOAD_FAILURE = \"NEWS_LIST_LOAD_FAILURE\";\nexport const TRIGGER_SEARCH_KEY = \"TRIGGER_SEARCH_KEY\";\n","import { NewsItemEntity } from \"../../../domain/entities/newsItemEntity\";\nimport {\n  HEADLINES_LOAD_REQUEST,\n  HEADLINES_LOAD_FAILURE,\n  HEADLINES_LOAD_SUCCESS,\n} from \"./headlines.types\";\n\nexport type HeadlinesState = {\n  loading: boolean;\n  newsItems: NewsItemEntity[];\n};\n\nexport const initialHeadlinesNewsState: HeadlinesState = {\n  loading: false,\n  newsItems: [],\n};\n\nfunction headlines(state = initialHeadlinesNewsState, action: any = null) {\n  switch (action.type) {\n    case HEADLINES_LOAD_REQUEST:\n      return {\n        ...state,\n        loading: true,\n      };\n\n    case HEADLINES_LOAD_FAILURE:\n      return {\n        ...state,\n        loading: false,\n      };\n\n    case HEADLINES_LOAD_SUCCESS:\n      return {\n        ...state,\n        newsItems: action.payload,\n        loading: false,\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default headlines;\n","export const HEADLINES_LOAD_REQUEST = \"HEADLINES_LOAD_REQUEST\";\nexport const HEADLINES_LOAD_SUCCESS = \"HEADLINES_LOAD_SUCCESS\";\nexport const HEADLINES_LOAD_FAILURE = \"HEADLINES_LOAD_FAILURE\";\n","import { combineReducers } from \"redux\";\n\nimport newsItems from \"../../presentation/state/news/news.reducer\";\nimport headlines from \"../../presentation/state/headlines/headlines.reducer\";\n\nconst rootReducer = combineReducers({\n  newsItems,\n  headlines,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from \"redux\";\nimport rootReducer from \"./rootReducer\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\nimport { initialNewsState } from \"../../presentation/state/news/news.reducer\";\nimport { initialHeadlinesNewsState } from \"../../presentation/state/headlines/headlines.reducer\";\nexport type StoreState = {\n  newsItems: typeof initialNewsState;\n  headlines: typeof initialHeadlinesNewsState;\n};\nexport default createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n","import { NewsItemEntity } from \"../entities/newsItemEntity\";\nimport NewsListRespository from \"../repository/newsListRepository\";\n\nexport class NewsUsecase {\n  constructor(private newsListRepository: NewsListRespository) {}\n  getNewsUseCase(searchQuery: string): Promise<NewsItemEntity[]> {\n    return this.newsListRepository.getList(searchQuery);\n  }\n}\n","import { Source } from \"./source\";\n\nexport class NewsItemEntity {\n  constructor(\n    public id: number,\n    public source: Source,\n    public author: string,\n    public title: string,\n    public description: string,\n    public url: string,\n    public urlToImage: string,\n    public publishedAt: string,\n    public content: string\n  ) {}\n}\n","import devEnv from \"./dev.json\";\n\ntype IConfig = {\n  API_KEY: string;\n  timeout: number;\n  baseURL: string;\n};\n\nconst config: IConfig = devEnv;\nexport default config;\n","import HttpClient from \"./httpClient\";\nimport config from \"../config/config\";\nimport { AxiosResponse } from \"axios\";\nimport { IQueryParam } from \"./queryParam\";\nimport { queryParamToStrings } from \"../utils/stringifyQueryParams\";\n\nexport class ContraHttpClient extends HttpClient {\n  _API_KEY = config.API_KEY;\n  _QUERY_START_KEY = \"?\";\n  constructor() {\n    super(config.baseURL);\n  }\n\n  public get<T, R = AxiosResponse<T>>(\n    url: string,\n    queryParams?: IQueryParam[]\n  ): Promise<R> {\n    let queryParamsString = queryParamToStrings(queryParams);\n    let apiKeyQuery = this.getAPIKey();\n    let joinedQuery = this.joinQueries(queryParamsString, apiKeyQuery);\n    return super.get(url + joinedQuery);\n  }\n\n  public post<T, B, R = AxiosResponse<T>>(url: string, data?: B): Promise<R> {\n    return super.post(url, data);\n  }\n\n  public put<T, B, R = AxiosResponse<T>>(url: string, data?: B): Promise<R> {\n    return super.put(url, data);\n  }\n\n  public patch<T, B, R = AxiosResponse<T>>(url: string, data?: B): Promise<R> {\n    return super.patch(url, data);\n  }\n\n  public delete<T, R = AxiosResponse<T>>(url: string): Promise<R> {\n    return super.delete(url);\n  }\n\n  private getAPIKey(): string {\n    return `apiKey=${this._API_KEY}`;\n  }\n\n  private joinQueries(query1: string, query2: string): string {\n    return `${this._QUERY_START_KEY}${\n      query1.length > 0 ? query1 + \"&\" : \"\"\n    }${query2}`;\n  }\n}\n\nexport const contraHttpClient = new ContraHttpClient();\n","import { IQueryParam } from \"../network/queryParam\";\nconst JOIN_STRING = \"&\",\n  JOIN_KEY_VALUE = \"=\";\nexport function queryParamToStrings(queryParams?: IQueryParam[]): string {\n  let query = \"\";\n  if (queryParams) {\n    query += queryParams\n      .map((item: IQueryParam) => {\n        return `${item.key}${JOIN_KEY_VALUE}${item.value}`;\n      })\n      .join(JOIN_STRING);\n  }\n\n  return query;\n}\n","import axios, { AxiosInstance, AxiosResponse } from \"axios\";\nimport config from \"../config/config\";\nexport default abstract class HttpClient {\n  _defaultTimeout = 3000;\n  client: AxiosInstance;\n  constructor(public baseUrl: string, public timeout?: number) {\n    this.client = axios.create({\n      baseURL: config.baseURL,\n      timeout: timeout || this._defaultTimeout,\n    });\n  }\n\n  public get<T, R = AxiosResponse<T>>(url: string): Promise<R> {\n    return this.client.get(url);\n  }\n\n  public post<T, B, R = AxiosResponse<T>>(url: string, data?: B): Promise<R> {\n    return this.client.post(url, data);\n  }\n\n  public put<T, B, R = AxiosResponse<T>>(url: string, data?: B): Promise<R> {\n    return this.client.put(url, data);\n  }\n\n  public patch<T, B, R = AxiosResponse<T>>(url: string, data?: B): Promise<R> {\n    return this.client.patch(url, data);\n  }\n\n  public delete<T, R = AxiosResponse<T>>(url: string): Promise<R> {\n    return this.client.delete(url);\n  }\n}\n","export class Source {\n  constructor(public id: string, public name: string) {}\n}\n","import { NewsItemEntity } from \"../../domain/entities/newsItemEntity\";\nimport { contraHttpClient } from \"../../core/network/contraHttpClient\";\nimport { Source } from \"../../domain/entities/source\";\nimport { AxiosResponse } from \"axios\";\n\ntype DataResponse = {\n  status: string;\n  totalResults: number;\n  articles: NewsItemEntity[];\n};\nfunction responseToEntityMapper(response: AxiosResponse): NewsItemEntity[] {\n  let initId = 1;\n  return response.data.articles.map((item: NewsItemEntity) => {\n    if (!item.urlToImage) return null;\n    return new NewsItemEntity(\n      initId++,\n      new Source(item.source.id, item.source.name),\n      item.author,\n      item.title,\n      item.description,\n      item.url,\n      item.urlToImage,\n      item.publishedAt,\n      item.content\n    );\n  });\n}\nexport class NewsRemoteDatasource {\n  async getList(searchQuery: string): Promise<NewsItemEntity[]> {\n    try {\n      let response = await contraHttpClient.get<DataResponse>(\"/everything\", [\n        { key: \"q\", value: searchQuery },\n      ]);\n      return responseToEntityMapper(response);\n    } catch (err) {\n      console.log(\"Caught error while calling /everything API\", err);\n      throw Error(\"Http call failed\");\n    }\n  }\n\n  async getHeadlines(): Promise<NewsItemEntity[]> {\n    try {\n      let response = await contraHttpClient.get<DataResponse>(\n        \"/top-headlines\",\n        [{ key: \"country\", value: \"us\" }]\n      );\n\n      return responseToEntityMapper(response);\n    } catch (err) {\n      console.log(\"Caught error while calling /healines API\", err);\n      throw Error(\"Http call failed\");\n    }\n  }\n}\n\nexport const newsRemoteDatasource = new NewsRemoteDatasource();\n","import NewsListRespository from \"../../domain/repository/newsListRepository\";\nimport { NewsItemEntity } from \"../../domain/entities/newsItemEntity\";\nimport { newsRemoteDatasource } from \"../remoteDatasource/newsRemoteDatasource\";\n\nexport default class NewsListRepositoryImpl implements NewsListRespository {\n  getHeadlines(): Promise<NewsItemEntity[]> {\n    return newsRemoteDatasource.getHeadlines();\n  }\n  async getList(searchQuery: string): Promise<NewsItemEntity[]> {\n    return newsRemoteDatasource.getList(searchQuery);\n  }\n}\n","import {\n  NEWS_LIST_LOAD_REQUEST,\n  NEWS_LIST_LOAD_SUCCESS,\n  NEWS_LIST_LOAD_FAILURE,\n} from \"./news.types\";\nimport { Dispatch } from \"redux\";\nimport { NewsUsecase } from \"../../../domain/usecases/getNewsUseCase\";\nimport NewsListRepositoryImpl from \"../../../data/repository/newListRepositoryImpl\";\nimport { NewsItemEntity } from \"../../../domain/entities/newsItemEntity\";\ntype IAction = {\n  type: string;\n  payload?: any;\n};\nexport const getNewsList = async (dispatch: Dispatch, seachQuery: string) => {\n  dispatch(fetchNewsListPending());\n\n  try {\n    const newsListRepositoryImpl = new NewsListRepositoryImpl();\n    const newsUsecase = new NewsUsecase(newsListRepositoryImpl);\n\n    const newItems = await newsUsecase.getNewsUseCase(seachQuery);\n    dispatch(fetchNewsListSuccess(newItems));\n  } catch (error) {\n    dispatch(fetchNewsListError(error));\n  }\n};\n\nexport function fetchNewsListPending() {\n  return { type: NEWS_LIST_LOAD_REQUEST };\n}\nexport function fetchNewsListSuccess(newItems: NewsItemEntity[]) {\n  return { type: NEWS_LIST_LOAD_SUCCESS, payload: newItems };\n}\n\nexport function fetchNewsListError(error: Error) {\n  return { type: NEWS_LIST_LOAD_FAILURE, error };\n}\n","import NewsListRespository from \"../repository/newsListRepository\";\nimport { NewsItemEntity } from \"../entities/newsItemEntity\";\n\nexport class GetHeadlinesUseCase {\n  constructor(private newsListRepository: NewsListRespository) {}\n  getHeadlines(): Promise<NewsItemEntity[]> {\n    return this.newsListRepository.getHeadlines();\n  }\n}\n","import { Dispatch } from \"redux\";\nimport NewsListRepositoryImpl from \"../../../data/repository/newListRepositoryImpl\";\nimport { NewsItemEntity } from \"../../../domain/entities/newsItemEntity\";\nimport {\n  HEADLINES_LOAD_REQUEST,\n  HEADLINES_LOAD_SUCCESS,\n  HEADLINES_LOAD_FAILURE,\n} from \"./headlines.types\";\nimport { GetHeadlinesUseCase } from \"../../../domain/usecases/getHeadlinesUseCase\";\n\nexport const getHeadlines = async (dispatch: Dispatch) => {\n  console.log(\">> 11\", dispatch);\n  dispatch(fetchHeadlinesPending());\n\n  try {\n    const newsListRepositoryImpl = new NewsListRepositoryImpl();\n    const headlinesUsecase = new GetHeadlinesUseCase(newsListRepositoryImpl);\n\n    const newItems = await headlinesUsecase.getHeadlines();\n    console.log(\"HEA\", newItems);\n    dispatch(fetchHeadlinesSuccess(newItems));\n  } catch (error) {\n    console.log(\"err\", error);\n    dispatch(fetchHeadlinesError(error));\n  }\n};\n\nexport function fetchHeadlinesPending() {\n  return { type: HEADLINES_LOAD_REQUEST };\n}\nexport function fetchHeadlinesSuccess(newItems: NewsItemEntity[]) {\n  return { type: HEADLINES_LOAD_SUCCESS, payload: newItems };\n}\n\nexport function fetchHeadlinesError(error: Error) {\n  return { type: HEADLINES_LOAD_FAILURE, error };\n}\n","import React from \"react\";\nimport moment from \"moment\";\nimport { NewsItemEntity } from \"../../domain/entities/newsItemEntity\";\nimport \"../../core/styles/index.css\";\ntype IProps = {\n  news: NewsItemEntity;\n};\n\nfunction getTime(time: string): string {\n  return moment.utc(time).fromNow();\n}\nfunction NewsCard(props: IProps) {\n  if (!props.news) {\n    return null;\n  }\n  return (\n    <div className=\"card \">\n      <img\n        className=\"card-img-top\"\n        src={props.news.urlToImage}\n        alt=\"Article news\"\n      />\n      <div className=\"card-body\">\n        <h5 className=\"card-title\">{props.news.title}</h5>\n        <p className=\"card-text\">{props.news.content}</p>\n\n        <p className=\"card-text\">\n          <small className=\"text-muted\">\n            {props.news.author}, {props.news.source.name}\n          </small>\n        </p>\n        <a href={props.news.url} target=\"_blank\" rel=\"noopener noreferrer\">\n          Read full story\n        </a>\n      </div>\n      <div className=\"card-footer\">\n        <small className=\"text-muted\">{getTime(props.news.publishedAt)}</small>\n      </div>\n    </div>\n  );\n}\n\nexport default NewsCard;\n","import React from \"react\";\nimport { NewsItemEntity } from \"../../../domain/entities/newsItemEntity\";\nimport NewsCard from \"../../component/NewsCard\";\n\ntype IProps = {\n  list: NewsItemEntity[];\n};\nfunction NewsCardList(props: IProps) {\n  let listOfCards = props.list.map((item, index) => (\n    <NewsCard news={item} key={`${index}`} />\n  ));\n  return <div className=\"card-columns\">{listOfCards}</div>;\n}\n\nexport default NewsCardList;\n","import React from \"react\";\nimport { StoreState } from \"../../../core/redux/store\";\nimport { connect } from \"react-redux\";\nimport { getNewsList } from \"../../state/news/news.actions\";\nimport { getHeadlines } from \"../../state/headlines/healines.actions\";\nimport { Dispatch } from \"redux\";\n\nimport NewsCardList from \"./newsCardList\";\n\ntype IProps = {\n  getNewsList: Function;\n  getHeadlines: Function;\n} & ReturnType<typeof mapStateToProps>;\n\nclass HomeScreen extends React.Component<IProps> {\n  handleSearch(keyword: string) {\n    this.props.getNewsList(keyword);\n  }\n  componentDidMount() {\n    this.props.getHeadlines();\n  }\n  render() {\n    return (\n      <div className=\"container\">\n        <NewsCardList list={this.props.headlines} />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: StoreState) => {\n  return {\n    newsItems: state.newsItems.newsItems,\n    headlines: state.headlines.newsItems,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    getNewsList: (searchQuery: string) => getNewsList(dispatch, searchQuery),\n    getHeadlines: () => getHeadlines(dispatch),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HomeScreen);\n","import React, { useEffect } from \"react\";\nimport { StoreState } from \"../../../core/redux/store\";\nimport { connect } from \"react-redux\";\nimport { getNewsList } from \"../../state/news/news.actions\";\nimport { Dispatch } from \"redux\";\nimport NewsCardList from \"../HomeScreen/newsCardList\";\nimport { useParams } from \"react-router-dom\";\n\ntype IProps = {\n  getNewsList: Function;\n} & ReturnType<typeof mapStateToProps>;\n\nfunction SearchResult(props: IProps) {\n  let { id } = useParams();\n  useEffect(() => {\n    props.getNewsList(id);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [id]);\n  return (\n    <>\n      <div className=\"container\">\n        <NewsCardList list={props.newsItems} />\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = (state: StoreState) => {\n  return {\n    newsItems: state.newsItems.newsItems,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    getNewsList: (searchQuery: string) => getNewsList(dispatch, searchQuery),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchResult);\n","import React, { useState } from \"react\";\nimport { Link, NavLink } from \"react-router-dom\";\n\nexport default function Header() {\n  const [searchKey, setSearchKey] = useState(\"\");\n  return (\n    <nav className=\"navbar navbar-expand-md navbar-dark bg-dark sticky-top\">\n      <NavLink to=\"/\">\n        <span className=\"navbar-brand\">Contra Newss</span>\n      </NavLink>\n      <button\n        className=\"navbar-toggler\"\n        type=\"button\"\n        data-toggle=\"collapse\"\n        data-target=\"#navbarTogglerDemo02\"\n        aria-controls=\"navbarTogglerDemo02\"\n        aria-expanded=\"false\"\n        aria-label=\"Toggle navigation\"\n      >\n        <span className=\"navbar-toggler-icon\"></span>\n      </button>\n\n      <div className=\"collapse navbar-collapse\" id=\"navbarTogglerDemo02\">\n        <ul className=\"navbar-nav mr-auto mt-2 mt-lg-0\">\n          <li className=\"nav-item\">\n            <NavLink\n              to=\"/headlines\"\n              activeClassName=\"active\"\n              className=\"nav-link\"\n            >\n              Headlines <span className=\"sr-only\">(current)</span>\n            </NavLink>\n          </li>\n        </ul>\n        <div className=\"form-inline my-2 my-lg-0\">\n          <input\n            className=\"form-control mr-sm-2\"\n            type=\"search\"\n            placeholder=\"Search\"\n            onChange={(event) => setSearchKey(event.target.value)}\n          />\n          <Link to={`/search/${searchKey}`}>\n            <button className=\"btn btn-outline-success my-2 my-sm-0\">\n              Search\n            </button>\n          </Link>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","import React from \"react\";\nimport HomeScreen from \"./screens/HomeScreen\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\nimport SearchResult from \"./screens/SearchResult\";\nimport Header from \"./component/Header\";\n\nfunction App(props: any) {\n  return (\n    <Router>\n      <Header />\n      <Switch>\n        <Route path=\"/search/:id\">\n          <SearchResult {...props} />\n        </Route>\n        <Route path=\"/headlines\" exact={true}>\n          <HomeScreen {...props} />\n        </Route>\n        <Route exact path=\"/\">\n          <Redirect to=\"/headlines\" />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./core/redux/store\";\n\nimport App from \"./presentation/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}